{
    "patch_id": "5f98b24fd6d80a586d0d1288",
    "description": "from evergreen status",
    "project_id": "mongo-rust-driver",
    "branch": "mongo-rust-driver",
    "git_hash": "4eb171cd412a4d4227bd3c6690838a3a84b5158c",
    "patch_number": 729,
    "author": "patrick.freed",
    "version": "",
    "status": "created",
    "create_time": "2020-10-27T23:50:40.147Z",
    "start_time": null,
    "finish_time": null,
    "builds": [],
    "tasks": [],
    "variants_tasks": [],
    "activated": false,
    "alias": "",
    "github_patch_data": {
        "pr_number": 0,
        "base_owner": "",
        "base_repo": "",
        "head_owner": "",
        "head_repo": "",
        "head_hash": "",
        "author": ""
    },
    "module_code_changes": [
        {
            "branch_name": "mongo-rust-driver",
            "html_link": "https://evergreen.mongodb.com/filediff/5f98b24fd6d80a586d0d1288?patch_number=0",
            "raw_link": "https://evergreen.mongodb.com/rawdiff/5f98b24fd6d80a586d0d1288?patch_number=0",
            "file_diffs": [
                {
                    "file_name": "src/operation/aggregate/mod.rs",
                    "additions": 2,
                    "deletions": 0,
                    "diff_link": "https://evergreen.mongodb.com/filediff/5f98b24fd6d80a586d0d1288?file_name=src%2Foperation%2Faggregate%2Fmod.rs&patch_number=0"
                },
                {
                    "file_name": "src/test/coll.rs",
                    "additions": 28,
                    "deletions": 0,
                    "diff_link": "https://evergreen.mongodb.com/filediff/5f98b24fd6d80a586d0d1288?file_name=src%2Ftest%2Fcoll.rs&patch_number=0"
                }
            ]
        }
    ],
    "parameters": [],
    "patched_config": "########################################\n# Evergreen Template for MongoDB Drivers\n########################################\n\n# When a task that used to pass starts to fail\n# Go through all versions that may have been skipped to detect\n# when the task started failing\nstepback: true\n\n# Mark a failure as a system/bootstrap failure (purple box) rather then a task\n# failure by default.\n# Actual testing tasks are marked with `type: test`\ncommand_type: system\n\n# Protect ourself against rogue test case, or curl gone wild, that runs forever\n# 12 minutes is the longest we'll ever run\nexec_timeout_secs: 3600 # 12 minutes is the longest we'll ever run\n\n# What to do when evergreen hits the timeout (`post:` tasks are run automatically)\ntimeout:\n  - command: shell.exec\n    params:\n      script: |\n        ls -la\n\nfunctions:\n  \"fetch source\":\n    # Executes git clone and applies the submitted patch, if any\n    - command: git.get_project\n      params:\n        directory: \"src\"\n    # Applies the subitted patch, if any\n    # Deprecated. Should be removed. But still needed for certain agents (ZAP)\n    - command: git.apply_patch\n    # Make an evergreen exapanstion file with dynamic values\n    - command: shell.exec\n      params:\n        working_dir: \"src\"\n        script: |\n           # Get the current unique version of this checkout\n           if [ \"${is_patch}\" = \"true\" ]; then\n              CURRENT_VERSION=$(git describe)-patch-${version_id}\n           else\n              CURRENT_VERSION=latest\n           fi\n\n           export DRIVERS_TOOLS=\"$(pwd)/../drivers-tools\"\n\n           # Python has cygwin path problems on Windows. Detect prospective mongo-orchestration home directory\n           if [ \"Windows_NT\" = \"$OS\" ]; then # Magic variable in cygwin\n              export DRIVERS_TOOLS=$(cygpath -m $DRIVERS_TOOLS)\n           fi\n\n           export MONGO_ORCHESTRATION_HOME=\"$DRIVERS_TOOLS/.evergreen/orchestration\"\n           export MONGODB_BINARIES=\"$DRIVERS_TOOLS/mongodb/bin\"\n           export UPLOAD_BUCKET=\"${project}\"\n           export PROJECT_DIRECTORY=\"$(pwd)\"\n\n           cat <<EOT > expansion.yml\n           CURRENT_VERSION: \"$CURRENT_VERSION\"\n           DRIVERS_TOOLS: \"$DRIVERS_TOOLS\"\n           MONGO_ORCHESTRATION_HOME: \"$MONGO_ORCHESTRATION_HOME\"\n           MONGODB_BINARIES: \"$MONGODB_BINARIES\"\n           UPLOAD_BUCKET: \"$UPLOAD_BUCKET\"\n           PROJECT_DIRECTORY: \"$PROJECT_DIRECTORY\"\n           PREPARE_SHELL: |\n              set -o errexit\n              set -o xtrace\n              export DRIVERS_TOOLS=\"$DRIVERS_TOOLS\"\n              export MONGO_ORCHESTRATION_HOME=\"$MONGO_ORCHESTRATION_HOME\"\n              export MONGODB_BINARIES=\"$MONGODB_BINARIES\"\n              export UPLOAD_BUCKET=\"$UPLOAD_BUCKET\"\n              export PROJECT_DIRECTORY=\"$PROJECT_DIRECTORY\"\n              export DRIVERS_TOOLS_X509=\"$DRIVERS_TOOLS/.evergreen/x509gen\"\n\n              export TMPDIR=\"$MONGO_ORCHESTRATION_HOME/db\"\n              export PATH=\"$MONGODB_BINARIES:$PATH\"\n              export PROJECT=\"${project}\"\n\n              export AUTH=${AUTH}\n              export SSL=${SSL}\n              export TOPOLOGY=${TOPOLOGY}\n              export MONGODB_VERSION=${MONGODB_VERSION}\n\n              if [ \"Windows_NT\" != \"$OS\" ]; then\n                  ulimit -n 64000\n              fi\n           EOT\n           # See what we've done\n           cat expansion.yml\n\n    # Load the expansion file to make an evergreen variable with the current unique version\n    - command: expansions.update\n      params:\n        file: src/expansion.yml\n\n  \"add aws auth variables to file\":\n    - command: shell.exec\n      type: test\n      params:\n        working_dir: \"src\"\n        silent: true\n        script: |\n          cat <<EOF > ${DRIVERS_TOOLS}/.evergreen/auth_aws/aws_e2e_setup.json\n          {\n              \"iam_auth_ecs_account\" : \"${iam_auth_ecs_account}\",\n              \"iam_auth_ecs_secret_access_key\" : \"${iam_auth_ecs_secret_access_key}\",\n              \"iam_auth_ecs_account_arn\": \"arn:aws:iam::557821124784:user/authtest_fargate_user\",\n              \"iam_auth_ecs_cluster\": \"${iam_auth_ecs_cluster}\",\n              \"iam_auth_ecs_task_definition\": \"${iam_auth_ecs_task_definition}\",\n              \"iam_auth_ecs_subnet_a\": \"${iam_auth_ecs_subnet_a}\",\n              \"iam_auth_ecs_subnet_b\": \"${iam_auth_ecs_subnet_b}\",\n              \"iam_auth_ecs_security_group\": \"${iam_auth_ecs_security_group}\",\n              \"iam_auth_assume_aws_account\" : \"${iam_auth_assume_aws_account}\",\n              \"iam_auth_assume_aws_secret_access_key\" : \"${iam_auth_assume_aws_secret_access_key}\",\n              \"iam_auth_assume_role_name\" : \"${iam_auth_assume_role_name}\",\n              \"iam_auth_ec2_instance_account\" : \"${iam_auth_ec2_instance_account}\",\n              \"iam_auth_ec2_instance_secret_access_key\" : \"${iam_auth_ec2_instance_secret_access_key}\",\n              \"iam_auth_ec2_instance_profile\" : \"${iam_auth_ec2_instance_profile}\"\n          }\n          EOF\n\n  \"run aws auth test with regular aws credentials\":\n    - command: shell.exec\n      type: test\n      params:\n        working_dir: \"src\"\n        script: |\n          ${PREPARE_SHELL}\n          # The aws_e2e_assume_role script requires python3 with boto3.\n          pip install boto3\n          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws\n          mongo aws_e2e_regular_aws.js\n    - command: shell.exec\n      type: test\n      params:\n        working_dir: \"src\"\n        silent: true\n        script: |\n          cat <<'EOF' > \"${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh\"\n            alias urlencode='python -c \"import sys, urllib as ul; sys.stdout.write(ul.quote_plus(sys.argv[1]))\"'\n            USER=$(urlencode ${iam_auth_ecs_account})\n            PASS=$(urlencode ${iam_auth_ecs_secret_access_key})\n            MONGODB_URI=\"mongodb://$USER:$PASS@localhost\"\n          EOF\n    - command: shell.exec\n      type: test\n      params:\n        working_dir: \"src\"\n        script: |\n          ${PREPARE_SHELL}\n          ASYNC_RUNTIME=${ASYNC_RUNTIME} .evergreen/run-aws-tests.sh\n\n  \"run aws auth test with assume role credentials\":\n    - command: shell.exec\n      type: test\n      params:\n        working_dir: \"src\"\n        script: |\n          ${PREPARE_SHELL}\n          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws\n          # The aws_e2e_assume_role script requires python3 with boto3.\n          pip install boto3\n          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws\n          mongo aws_e2e_assume_role.js\n    - command: shell.exec\n      type: test\n      params:\n        working_dir: \"src\"\n        silent: true\n        script: |\n          # DO NOT ECHO WITH XTRACE (which PREPARE_SHELL does)\n          cat <<'EOF' > \"${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh\"\n              alias urlencode='python -c \"import sys, urllib as ul; sys.stdout.write(ul.quote_plus(sys.argv[1]))\"'\n              alias jsonkey='python -c \"import json,sys;sys.stdout.write(json.load(sys.stdin)[sys.argv[1]])\" < ${DRIVERS_TOOLS}/.evergreen/auth_aws/creds.json'\n              USER=$(jsonkey AccessKeyId)\n              USER=$(urlencode $USER)\n              PASS=$(jsonkey SecretAccessKey)\n              PASS=$(urlencode $PASS)\n              SESSION_TOKEN=$(jsonkey SessionToken)\n              SESSION_TOKEN=$(urlencode $SESSION_TOKEN)\n              MONGODB_URI=\"mongodb://$USER:$PASS@localhost\"\n          EOF\n    - command: shell.exec\n      type: test\n      params:\n        working_dir: \"src\"\n        script: |\n          ${PREPARE_SHELL}\n          ASYNC_RUNTIME=${ASYNC_RUNTIME} .evergreen/run-aws-tests.sh\n\n  \"run aws auth test with aws EC2 credentials\":\n    - command: shell.exec\n      type: test\n      params:\n        working_dir: \"src\"\n        script: |\n          ${PREPARE_SHELL}\n          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws\n          mongo aws_e2e_ec2.js\n    - command: shell.exec\n      type: test\n      params:\n        working_dir: \"src\"\n        script: |\n          ${PREPARE_SHELL}\n          ASYNC_RUNTIME=${ASYNC_RUNTIME} .evergreen/run-aws-tests.sh\n\n  \"run aws auth test with aws credentials as environment variables\":\n    - command: shell.exec\n      type: test\n      params:\n        working_dir: \"src\"\n        silent: true\n        script: |\n          # DO NOT ECHO WITH XTRACE (which PREPARE_SHELL does)\n          cat <<'EOF' > \"${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh\"\n            export AWS_ACCESS_KEY_ID=${iam_auth_ecs_account}\n            export AWS_SECRET_ACCESS_KEY=${iam_auth_ecs_secret_access_key}\n          EOF\n    - command: shell.exec\n      type: test\n      params:\n        working_dir: \"src\"\n        script: |\n          ${PREPARE_SHELL}\n          ASYNC_RUNTIME=${ASYNC_RUNTIME} PROJECT_DIRECTORY=${PROJECT_DIRECTORY} .evergreen/run-aws-tests.sh\n\n  \"run aws auth test with aws credentials and session token as environment variables\":\n    - command: shell.exec\n      type: test\n      params:\n        working_dir: \"src\"\n        silent: true\n        script: |\n          # DO NOT ECHO WITH XTRACE (which PREPARE_SHELL does)\n          cat <<'EOF' > \"${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh\"\n            alias jsonkey='python -c \"import json,sys;sys.stdout.write(json.load(sys.stdin)[sys.argv[1]])\" < ${DRIVERS_TOOLS}/.evergreen/auth_aws/creds.json'\n            export AWS_ACCESS_KEY_ID=$(jsonkey AccessKeyId)\n            export AWS_SECRET_ACCESS_KEY=$(jsonkey SecretAccessKey)\n            export AWS_SESSION_TOKEN=$(jsonkey SessionToken)\n          EOF\n    - command: shell.exec\n      type: test\n      params:\n        working_dir: \"src\"\n        script: |\n          ${PREPARE_SHELL}\n          ASYNC_RUNTIME=${ASYNC_RUNTIME} .evergreen/run-aws-tests.sh\n\n  \"run aws ECS auth test\":\n    - command: shell.exec\n      type: test\n      params:\n        working_dir: \"src\"\n        script: |\n          ${PREPARE_SHELL}\n          AUTH_AWS_DIR=${DRIVERS_TOOLS}/.evergreen/auth_aws\n          ECS_SRC_DIR=$AUTH_AWS_DIR/src\n\n          mkdir -p $ECS_SRC_DIR/.evergreen\n          \n          # fix issue with `TestData` in SERVER-46340\n          sed -i '1s+^+TestData = {};\\n+' $AUTH_AWS_DIR/lib/ecs_hosted_test.js\n\n          # compile mini test project\n          cd $PROJECT_DIRECTORY/.evergreen/aws-ecs-test\n          . ~/.cargo/env\n          cargo build\n          cd -\n\n          # copy mini test binary\n          cp $PROJECT_DIRECTORY/.evergreen/run-mongodb-aws-ecs-test.sh $ECS_SRC_DIR/.evergreen\n          cp $PROJECT_DIRECTORY/.evergreen/aws-ecs-test/target/debug/aws-ecs-test $ECS_SRC_DIR\n\n          cd $AUTH_AWS_DIR\n          cat <<EOF > setup.js\n            const mongo_binaries = \"$MONGODB_BINARIES\";\n            const project_dir = \"$ECS_SRC_DIR\";\n          EOF\n\n          cat setup.js\n          mongo --nodb setup.js aws_e2e_ecs.js\n\n  \"run x509 tests\":\n    - command: shell.exec\n      type: test\n      params:\n        shell: bash\n        working_dir: \"src\"\n        script: |\n          ${PREPARE_SHELL}\n\n          export MONGODB_URI=\"${MONGODB_URI}\"\n          export SSL=\"${SSL}\"\n          . .evergreen/generate-uri.sh\n          \n          export CERT_PATH=$DRIVERS_TOOLS/.evergreen/x509gen/client.pem\n\n          .evergreen/run-x509-tests.sh\n\n  \"run plain tests\":\n    - command: shell.exec\n      type: test\n      params:\n        shell: bash\n        working_dir: \"src\"\n        script: |\n          ${PREPARE_SHELL}\n\n          .evergreen/run-plain-tests.sh\n            \n  \"prepare resources\":\n    - command: shell.exec\n      params:\n        script: |\n          ${PREPARE_SHELL}\n          rm -rf $DRIVERS_TOOLS\n          git clone git://github.com/mongodb-labs/drivers-evergreen-tools.git $DRIVERS_TOOLS\n          echo \"{ \\\"releases\\\": { \\\"default\\\": \\\"$MONGODB_BINARIES\\\" }}\" > $MONGO_ORCHESTRATION_HOME/orchestration.config\n\n  \"install dependencies\":\n    command: shell.exec\n    params:\n      working_dir: \"src\"\n      script: |\n        ${PREPARE_SHELL}\n        .evergreen/install-dependencies.sh\n\n  \"bootstrap mongo-orchestration\":\n    - command: shell.exec\n      params:\n        script: |\n          ${PREPARE_SHELL}\n          ORCHESTRATION_FILE=${ORCHESTRATION_FILE} \\\n            MONGODB_VERSION=${MONGODB_VERSION} \\\n            TOPOLOGY=${TOPOLOGY} \\\n            AUTH=${AUTH} \\\n            SSL=${SSL} \\\n            sh ${DRIVERS_TOOLS}/.evergreen/run-orchestration.sh\n    # run-orchestration generates expansion file with the MONGODB_URI for the cluster\n    - command: expansions.update\n      params:\n        file: mo-expansion.yml\n\n  \"run tests\":\n    - command: shell.exec\n      type: test\n      params:\n        shell: bash\n        working_dir: \"src\"\n        script: |\n          ${PREPARE_SHELL}\n          export MONGODB_URI=\"${MONGODB_URI}\"\n          export SSL=\"${SSL}\"\n          . .evergreen/generate-uri.sh\n\n          SINGLE_THREAD=${SINGLE_THREAD} ASYNC_RUNTIME=${ASYNC_RUNTIME} .evergreen/run-tests.sh\n\n  \"run atlas tests\":\n    - command: shell.exec\n      type: test\n      params:\n        silent: true\n        shell: bash\n        working_dir: \"src\"\n        script: |\n          # DO NOT ECHO WITH XTRACE (which PREPARE_SHELL does)\n          export MONGO_ATLAS_TESTS=1\n          export MONGO_ATLAS_FREE_TIER_REPL_URI='${MONGO_ATLAS_FREE_TIER_REPL_URI}'\n          export MONGO_ATLAS_FREE_TIER_REPL_URI_SRV='${MONGO_ATLAS_FREE_TIER_REPL_URI_SRV}'\n          ASYNC_RUNTIME=${ASYNC_RUNTIME} .evergreen/run-atlas-tests.sh\n\n  \"run ocsp test\":\n    - command: shell.exec\n      type: test\n      params:\n        shell: bash\n        working_dir: \"src\"\n        script: |\n          ${PREPARE_SHELL}\n\n          ASYNC_RUNTIME=${ASYNC_RUNTIME} \\\n          MONGODB_URI=${MONGODB_URI} \\\n          OCSP_TLS_SHOULD_SUCCEED=${OCSP_TLS_SHOULD_SUCCEED} \\\n          OCSP_ALGORITHM=${OCSP_ALGORITHM} \\\n          MONGO_OCSP_TESTS=1 \\\n          .evergreen/run-ocsp-test.sh\n\n  run-valid-ocsp-server:\n    - command: shell.exec\n      params:\n        script: |\n          cd ${DRIVERS_TOOLS}/.evergreen/ocsp\n          ${PYTHON} -m virtualenv ./venv\n          ./venv/${VENV_BIN_DIR}/python -m pip install -r mock-ocsp-responder-requirements.txt\n    - command: shell.exec\n      params:\n        background: true\n        script: |\n          cd ${DRIVERS_TOOLS}/.evergreen/ocsp\n\n          ./venv/${VENV_BIN_DIR}/python ocsp_mock.py \\\n          --ca_file ${OCSP_ALGORITHM}/ca.pem \\\n          --ocsp_responder_cert ${OCSP_ALGORITHM}/ca.crt \\\n          --ocsp_responder_key ${OCSP_ALGORITHM}/ca.key \\\n          -p 8100 -v\n\n  run-revoked-ocsp-server:\n    - command: shell.exec\n      params:\n        script: |\n          cd ${DRIVERS_TOOLS}/.evergreen/ocsp\n          ${PYTHON} -m virtualenv ./venv\n          ./venv/${VENV_BIN_DIR}/python -m pip install -r mock-ocsp-responder-requirements.txt\n    - command: shell.exec\n      params:\n        background: true\n        script: |\n          cd ${DRIVERS_TOOLS}/.evergreen/ocsp\n\n          ./venv/${VENV_BIN_DIR}/python ocsp_mock.py \\\n          --ca_file ${OCSP_ALGORITHM}/ca.pem \\\n          --ocsp_responder_cert ${OCSP_ALGORITHM}/ca.crt \\\n          --ocsp_responder_key ${OCSP_ALGORITHM}/ca.key \\\n          -p 8100 \\\n          -v \\\n          --fault revoked\n\n  run-valid-delegate-ocsp-server:\n    - command: shell.exec\n      params:\n        script: |\n          cd ${DRIVERS_TOOLS}/.evergreen/ocsp\n          ${PYTHON} -m virtualenv ./venv\n          ./venv/${VENV_BIN_DIR}/python -m pip install -r mock-ocsp-responder-requirements.txt\n    - command: shell.exec\n      params:\n        background: true\n        script: |\n          cd ${DRIVERS_TOOLS}/.evergreen/ocsp\n\n          ./venv/${VENV_BIN_DIR}/python ocsp_mock.py \\\n          --ca_file ${OCSP_ALGORITHM}/ca.pem \\\n          --ocsp_responder_cert ${OCSP_ALGORITHM}/ocsp-responder.crt \\\n          --ocsp_responder_key ${OCSP_ALGORITHM}/ocsp-responder.key \\\n          -p 8100 -v\n\n  run-revoked-delegate-ocsp-server:\n    - command: shell.exec\n      params:\n        script: |\n          cd ${DRIVERS_TOOLS}/.evergreen/ocsp\n          ${PYTHON} -m virtualenv ./venv\n          ./venv/${VENV_BIN_DIR}/python -m pip install -r mock-ocsp-responder-requirements.txt\n    - command: shell.exec\n      params:\n        background: true\n        script: |\n          cd ${DRIVERS_TOOLS}/.evergreen/ocsp\n\n          ./venv/${VENV_BIN_DIR}/python ocsp_mock.py \\\n          --ca_file ${OCSP_ALGORITHM}/ca.pem \\\n          --ocsp_responder_cert ${OCSP_ALGORITHM}/ocsp-responder.crt \\\n          --ocsp_responder_key ${OCSP_ALGORITHM}/ocsp-responder.key \\\n          -p 8100 \\\n          -v \\\n          --fault revoked\n\n  \"compile only\":\n    - command: shell.exec\n      type: test\n      params:\n        shell: bash\n        working_dir: \"src\"\n        script: |\n          ${PREPARE_SHELL}\n          ASYNC_RUNTIME=${ASYNC_RUNTIME} RUST_VERSION=${RUST_VERSION} .evergreen/compile-only.sh\n\n  \"check rustfmt\":\n    - command: shell.exec\n      type: test\n      params:\n        shell: bash\n        working_dir: \"src\"\n        script: |\n          ${PREPARE_SHELL}\n          .evergreen/check-rustfmt.sh\n\n  \"check clippy\":\n    - command: shell.exec\n      type: test\n      params:\n        shell: bash\n        working_dir: \"src\"\n        script: |\n          ${PREPARE_SHELL}\n          .evergreen/check-clippy.sh\n\n  \"upload-mo-artifacts\":\n    - command: shell.exec\n      params:\n        script: |\n          ${PREPARE_SHELL}\n          find $MONGO_ORCHESTRATION_HOME -name \\*.log | xargs tar czf mongodb-logs.tar.gz\n    - command: s3.put\n      params:\n        aws_key: ${aws_key}\n        aws_secret: ${aws_secret}\n        local_file: mongodb-logs.tar.gz\n        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-mongodb-logs.tar.gz\n        bucket: mciuploads\n        permissions: public-read\n        content_type: ${content_type|application/x-gzip}\n        display_name: \"mongodb-logs.tar.gz\"\n\n  \"stop mongo orchestration\":\n    - command: shell.exec\n      params:\n        script: |\n          ${PREPARE_SHELL}\n          \n          cd \"$MONGO_ORCHESTRATION_HOME\"\n          # source the mongo-orchestration virtualenv if it exists\n          if [ -f venv/bin/activate ]; then\n            . venv/bin/activate\n          elif [ -f venv/Scripts/activate ]; then\n            . venv/Scripts/activate\n          fi\n          mongo-orchestration stop\n\n\n  \"cleanup\":\n    - command: shell.exec\n      params:\n        script: |\n          ${PREPARE_SHELL}\n          rm -rf ~/.rustup\n          rm -rf $DRIVERS_TOOLS || true\n\n  \"fix absolute paths\":\n    - command: shell.exec\n      params:\n        script: |\n          ${PREPARE_SHELL}\n          for filename in $(find ${DRIVERS_TOOLS} -name \\*.json); do\n            perl -p -i -e \"s|ABSOLUTE_PATH_REPLACEMENT_TOKEN|${DRIVERS_TOOLS}|g\" $filename\n          done\n\n  \"windows fix\":\n    - command: shell.exec\n      params:\n        script: |\n          ${PREPARE_SHELL}\n          for i in $(find ${DRIVERS_TOOLS}/.evergreen ${PROJECT_DIRECTORY}/.evergreen -name \\*.sh); do\n            cat $i | tr -d '\\r' > $i.new\n            mv $i.new $i\n          done\n\n          # Copy client certificate because symlinks do not work on Windows.\n          cp ${DRIVERS_TOOLS}/.evergreen/x509gen/client.pem ${MONGO_ORCHESTRATION_HOME}/lib/client.pem\n\n  \"make files executable\":\n    - command: shell.exec\n      params:\n        script: |\n          ${PREPARE_SHELL}\n          for i in $(find ${DRIVERS_TOOLS}/.evergreen ${PROJECT_DIRECTORY}/.evergreen -name \\*.sh); do\n            chmod +x $i\n          done\n\n  \"init test-results\":\n    - command: shell.exec\n      params:\n        script: |\n          ${PREPARE_SHELL}\n          echo '{\"results\": [{ \"status\": \"FAIL\", \"test_file\": \"Build\", \"log_raw\": \"No test-results.json found was created\"  } ]}' > ${PROJECT_DIRECTORY}/test-results.json\n\npre:\n  - func: \"fetch source\"\n  - func: \"prepare resources\"\n  - func: \"windows fix\"\n  - func: \"fix absolute paths\"\n  - func: \"init test-results\"\n  - func: \"make files executable\"\n  - func: \"install dependencies\"\n\npost:\n  - func: \"stop mongo orchestration\"\n  - func: \"upload-mo-artifacts\"\n  - func: \"cleanup\"\n\ntasks:\n  - name: \"test-3.6-standalone\"\n    tags: [\"3.6\", \"standalone\"]\n    commands:\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          MONGODB_VERSION: \"3.6\"\n          TOPOLOGY: \"server\"\n      - func: \"run tests\"\n\n  - name: \"test-3.6-replica_set\"\n    tags: [\"3.6\", \"replica_set\"]\n    commands:\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          MONGODB_VERSION: \"3.6\"\n          TOPOLOGY: \"replica_set\"\n      - func: \"run tests\"\n\n  - name: \"test-3.6-sharded_cluster\"\n    tags: [\"3.6\", \"sharded_cluster\"]\n    commands:\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          MONGODB_VERSION: \"3.6\"\n          TOPOLOGY: \"sharded_cluster\"\n      - func: \"run tests\"\n\n  - name: \"test-4.0-standalone\"\n    tags: [\"4.0\", \"standalone\"]\n    commands:\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          MONGODB_VERSION: \"4.0\"\n          TOPOLOGY: \"server\"\n      - func: \"run tests\"\n\n  - name: \"test-4.0-replica_set\"\n    tags: [\"4.0\", \"replica_set\"]\n    commands:\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          MONGODB_VERSION: \"4.0\"\n          TOPOLOGY: \"replica_set\"\n      - func: \"run tests\"\n\n  - name: \"test-4.0-sharded_cluster\"\n    tags: [\"4.0\", \"sharded_cluster\"]\n    commands:\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          MONGODB_VERSION: \"4.0\"\n          TOPOLOGY: \"sharded_cluster\"\n      - func: \"run tests\"\n\n  - name: \"test-4.2-standalone\"\n    tags: [\"4.2\", \"standalone\"]\n    commands:\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          MONGODB_VERSION: \"4.2\"\n          TOPOLOGY: \"server\"\n      - func: \"run tests\"\n\n  - name: \"test-4.2-replica_set\"\n    tags: [\"4.2\", \"replica_set\"]\n    commands:\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          MONGODB_VERSION: \"4.2\"\n          TOPOLOGY: \"replica_set\"\n      - func: \"run tests\"\n\n  - name: \"test-4.2-sharded_cluster\"\n    tags: [\"4.2\", \"sharded_cluster\"]\n    commands:\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          MONGODB_VERSION: \"4.2\"\n          TOPOLOGY: \"sharded_cluster\"\n      - func: \"run tests\"\n\n  - name: \"test-4.4-standalone\"\n    tags: [\"4.4\", \"standalone\"]\n    commands:\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          MONGODB_VERSION: \"4.4\"\n          TOPOLOGY: \"server\"\n      - func: \"run tests\"\n\n  - name: \"test-4.4-replica_set\"\n    tags: [\"4.4\", \"replica_set\"]\n    commands:\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          MONGODB_VERSION: \"4.4\"\n          TOPOLOGY: \"replica_set\"\n      - func: \"run tests\"\n\n  - name: \"test-4.4-sharded_cluster\"\n    tags: [\"4.4\", \"sharded_cluster\"]\n    commands:\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          MONGODB_VERSION: \"4.4\"\n          TOPOLOGY: \"sharded_cluster\"\n      - func: \"run tests\"\n\n  - name: \"test-4.4-aws-auth\"\n    # \"4.4\" explicitly left off to keep this out of the generic matrix\n    tags: [\"aws-auth\"]\n    commands:\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"auth-aws.json\"\n          MONGODB_VERSION: \"4.4\"\n          AUTH: \"auth\"\n          TOPOLOGY: \"server\"\n      - func: \"add aws auth variables to file\"\n      - func: \"run aws auth test with regular aws credentials\"\n      - func: \"run aws auth test with assume role credentials\"\n      - func: \"run aws auth test with aws credentials as environment variables\"\n      - func: \"run aws auth test with aws credentials and session token as environment variables\"\n      - func: \"run aws auth test with aws EC2 credentials\"\n      - func: \"run aws ECS auth test\"\n\n  - name: \"test-latest-standalone\"\n    tags: [\"latest\", \"standalone\"]\n    commands:\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          MONGODB_VERSION: \"latest\"\n          TOPOLOGY: \"server\"\n      - func: \"run tests\"\n\n  - name: \"test-latest-replica_set\"\n    tags: [\"latest\", \"replica_set\"]\n    commands:\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          MONGODB_VERSION: \"latest\"\n          TOPOLOGY: \"replica_set\"\n      - func: \"run tests\"\n\n  - name: \"test-latest-sharded_cluster\"\n    tags: [\"latest\", \"sharded_cluster\"]\n    commands:\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          MONGODB_VERSION: \"latest\"\n          TOPOLOGY: \"sharded_cluster\"\n      - func: \"run tests\"\n\n  - name: \"test-latest-aws-auth\"\n    # \"latest\" explicitly left off to keep this out of the generic matrix\n    tags: [\"aws-auth\"]\n    commands:\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"auth-aws.json\"\n          MONGODB_VERSION: \"latest\"\n          AUTH: \"auth\"\n          TOPOLOGY: \"server\"\n      - func: \"add aws auth variables to file\"\n      - func: \"run aws auth test with regular aws credentials\"\n      - func: \"run aws auth test with assume role credentials\"\n      - func: \"run aws auth test with aws credentials as environment variables\"\n      - func: \"run aws auth test with aws credentials and session token as environment variables\"\n      - func: \"run aws auth test with aws EC2 credentials\"\n      - func: \"run aws ECS auth test\"\n\n  - name: \"test-atlas-connectivity\"\n    tags: [\"atlas-connect\"]\n    commands:\n      - func: \"run atlas tests\"\n\n  - name: \"test-x509-auth\"\n    commands:\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          MONGODB_VERSION: \"4.4\"\n          TOPOLOGY: \"server\"\n      - func: \"run x509 tests\"\n\n  - name: \"test-plain-auth\"\n    commands:\n      - func: \"run plain tests\"\n\n  - name: test-ocsp-rsa-valid-cert-server-staples\n    tags: [\"ocsp\", \"ocsp-rsa\", \"ocsp-staple\"]\n    commands:\n      - func: \"run-valid-ocsp-server\"\n        vars:\n          OCSP_ALGORITHM: \"rsa\"\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"rsa-basic-tls-ocsp-mustStaple.json\"\n      - func: \"run ocsp test\"\n        vars:\n          OCSP_ALGORITHM: \"rsa\"\n          OCSP_TLS_SHOULD_SUCCEED: \"true\"\n\n  - name: test-ocsp-rsa-invalid-cert-server-staples\n    tags: [\"ocsp\", \"ocsp-rsa\", \"ocsp-staple\"]\n    commands:\n      - func: run-revoked-ocsp-server\n        vars:\n          OCSP_ALGORITHM: \"rsa\"\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"rsa-basic-tls-ocsp-mustStaple.json\"\n      - func: \"run ocsp test\"\n        vars:\n          OCSP_ALGORITHM: \"rsa\"\n          OCSP_TLS_SHOULD_SUCCEED: \"false\"\n\n  - name: test-ocsp-rsa-valid-cert-server-does-not-staple\n    tags: [\"ocsp\", \"ocsp-rsa\"]\n    commands:\n      - func: \"run-valid-ocsp-server\"\n        vars:\n          OCSP_ALGORITHM: \"rsa\"\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"rsa-basic-tls-ocsp-disableStapling.json\"\n      - func: \"run ocsp test\"\n        vars:\n          OCSP_ALGORITHM: \"rsa\"\n          OCSP_TLS_SHOULD_SUCCEED: \"true\"\n\n  - name: test-ocsp-rsa-invalid-cert-server-does-not-staple\n    tags: [\"ocsp\", \"ocsp-rsa\"]\n    commands:\n      - func: run-revoked-ocsp-server\n        vars:\n          OCSP_ALGORITHM: \"rsa\"\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"rsa-basic-tls-ocsp-disableStapling.json\"\n      - func: \"run ocsp test\"\n        vars:\n          OCSP_ALGORITHM: \"rsa\"\n          OCSP_TLS_SHOULD_SUCCEED: \"false\"\n\n  - name: test-ocsp-rsa-soft-fail\n    tags: [\"ocsp\", \"ocsp-rsa\"]\n    commands:\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"rsa-basic-tls-ocsp-disableStapling.json\"\n      - func: \"run ocsp test\"\n        vars:\n          OCSP_ALGORITHM: \"rsa\"\n          OCSP_TLS_SHOULD_SUCCEED: \"true\"\n\n  - name: test-ocsp-rsa-malicious-invalid-cert-mustStaple-server-does-not-staple\n    tags: [\"ocsp\", \"ocsp-rsa\"]\n    commands:\n      - func: run-revoked-ocsp-server\n        vars:\n          OCSP_ALGORITHM: \"rsa\"\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"rsa-basic-tls-ocsp-mustStaple-disableStapling.json\"\n      - func: \"run ocsp test\"\n        vars:\n          OCSP_ALGORITHM: \"rsa\"\n          OCSP_TLS_SHOULD_SUCCEED: \"false\"\n\n  - name: test-ocsp-rsa-malicious-no-responder-mustStaple-server-does-not-staple\n    tags: [\"ocsp\", \"ocsp-rsa\"]\n    commands:\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"rsa-basic-tls-ocsp-mustStaple-disableStapling.json\"\n      - func: \"run ocsp test\"\n        vars:\n          OCSP_ALGORITHM: \"rsa\"\n          OCSP_TLS_SHOULD_SUCCEED: \"false\"\n\n  - name: test-ocsp-rsa-delegate-valid-cert-server-staples\n    tags: [\"ocsp\", \"ocsp-rsa\", \"ocsp-staple\"]\n    commands:\n      - func: run-valid-delegate-ocsp-server\n        vars:\n          OCSP_ALGORITHM: \"rsa\"\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"rsa-basic-tls-ocsp-mustStaple.json\"\n      - func: \"run ocsp test\"\n        vars:\n          OCSP_ALGORITHM: \"rsa\"\n          OCSP_TLS_SHOULD_SUCCEED: \"true\"\n\n  - name: test-ocsp-rsa-delegate-invalid-cert-server-staples\n    tags: [\"ocsp\", \"ocsp-rsa\", \"ocsp-staple\"]\n    commands:\n      - func: run-revoked-delegate-ocsp-server\n        vars:\n          OCSP_ALGORITHM: \"rsa\"\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"rsa-basic-tls-ocsp-mustStaple.json\"\n      - func: \"run ocsp test\"\n        vars:\n          OCSP_ALGORITHM: \"rsa\"\n          OCSP_TLS_SHOULD_SUCCEED: \"false\"\n\n  - name: test-ocsp-rsa-delegate-valid-cert-server-does-not-staple\n    tags: [\"ocsp\", \"ocsp-rsa\"]\n    commands:\n      - func: run-valid-delegate-ocsp-server\n        vars:\n          OCSP_ALGORITHM: \"rsa\"\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"rsa-basic-tls-ocsp-disableStapling.json\"\n      - func: \"run ocsp test\"\n        vars:\n          OCSP_ALGORITHM: \"rsa\"\n          OCSP_TLS_SHOULD_SUCCEED: \"true\"\n\n  - name: test-ocsp-rsa-delegate-invalid-cert-server-does-not-staple\n    tags: [\"ocsp\", \"ocsp-rsa\"]\n    commands:\n      - func: run-revoked-delegate-ocsp-server\n        vars:\n          OCSP_ALGORITHM: \"rsa\"\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"rsa-basic-tls-ocsp-disableStapling.json\"\n      - func: \"run ocsp test\"\n        vars:\n          OCSP_ALGORITHM: \"rsa\"\n          OCSP_TLS_SHOULD_SUCCEED: \"false\"\n\n  - name: test-ocsp-rsa-delegate-malicious-invalid-cert-mustStaple-server-does-not-staple\n    tags: [\"ocsp\", \"ocsp-rsa\"]\n    commands:\n      - func: run-revoked-delegate-ocsp-server\n        vars:\n          OCSP_ALGORITHM: \"rsa\"\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"rsa-basic-tls-ocsp-mustStaple-disableStapling.json\"\n      - func: \"run ocsp test\"\n        vars:\n          OCSP_ALGORITHM: \"rsa\"\n          OCSP_TLS_SHOULD_SUCCEED: \"false\"\n\n  - name: test-ocsp-ecdsa-valid-cert-server-staples\n    tags: [\"ocsp\", \"ocsp-ecdsa\", \"ocsp-staple\"]\n    commands:\n      - func: run-valid-ocsp-server\n        vars:\n          OCSP_ALGORITHM: \"ecdsa\"\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"ecdsa-basic-tls-ocsp-mustStaple.json\"\n      - func: \"run ocsp test\"\n        vars:\n          OCSP_ALGORITHM: \"ecdsa\"\n          OCSP_TLS_SHOULD_SUCCEED: \"true\"\n\n  - name: test-ocsp-ecdsa-invalid-cert-server-staples\n    tags: [\"ocsp\", \"ocsp-ecdsa\", \"ocsp-staple\"]\n    commands:\n      - func: run-revoked-ocsp-server\n        vars:\n          OCSP_ALGORITHM: \"ecdsa\"\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"ecdsa-basic-tls-ocsp-mustStaple.json\"\n      - func: \"run ocsp test\"\n        vars:\n          OCSP_ALGORITHM: \"ecdsa\"\n          OCSP_TLS_SHOULD_SUCCEED: \"false\"\n\n  - name: test-ocsp-ecdsa-valid-cert-server-does-not-staple\n    tags: [\"ocsp\", \"ocsp-ecdsa\"]\n    commands:\n      - func: run-valid-ocsp-server\n        vars:\n          OCSP_ALGORITHM: \"ecdsa\"\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"ecdsa-basic-tls-ocsp-disableStapling.json\"\n      - func: \"run ocsp test\"\n        vars:\n          OCSP_ALGORITHM: \"ecdsa\"\n          OCSP_TLS_SHOULD_SUCCEED: \"true\"\n\n  - name: test-ocsp-ecdsa-invalid-cert-server-does-not-staple\n    tags: [\"ocsp\", \"ocsp-ecdsa\"]\n    commands:\n      - func: run-revoked-ocsp-server\n        vars:\n          OCSP_ALGORITHM: \"ecdsa\"\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"ecdsa-basic-tls-ocsp-disableStapling.json\"\n      - func: \"run ocsp test\"\n        vars:\n          OCSP_ALGORITHM: \"ecdsa\"\n          OCSP_TLS_SHOULD_SUCCEED: \"false\"\n\n  - name: test-ocsp-ecdsa-soft-fail\n    tags: [\"ocsp\", \"ocsp-ecdsa\"]\n    commands:\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"ecdsa-basic-tls-ocsp-disableStapling.json\"\n      - func: \"run ocsp test\"\n        vars:\n          OCSP_ALGORITHM: \"ecdsa\"\n          OCSP_TLS_SHOULD_SUCCEED: \"true\"\n\n  - name: test-ocsp-ecdsa-malicious-invalid-cert-mustStaple-server-does-not-staple\n    tags: [\"ocsp\", \"ocsp-ecdsa\"]\n    commands:\n      - func: run-revoked-ocsp-server\n        vars:\n          OCSP_ALGORITHM: \"ecdsa\"\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"ecdsa-basic-tls-ocsp-mustStaple-disableStapling.json\"\n      - func: \"run ocsp test\"\n        vars:\n          OCSP_ALGORITHM: \"ecdsa\"\n          OCSP_TLS_SHOULD_SUCCEED: \"false\"\n\n  - name: test-ocsp-ecdsa-malicious-no-responder-mustStaple-server-does-not-staple\n    tags: [\"ocsp\", \"ocsp-ecdsa\"]\n    commands:\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"ecdsa-basic-tls-ocsp-mustStaple-disableStapling.json\"\n      - func: \"run ocsp test\"\n        vars:\n          OCSP_ALGORITHM: \"ecdsa\"\n          OCSP_TLS_SHOULD_SUCCEED: \"false\"\n\n  - name: test-ocsp-ecdsa-delegate-valid-cert-server-staples\n    tags: [\"ocsp\", \"ocsp-ecdsa\", \"ocsp-staple\"]\n    commands:\n      - func: run-valid-delegate-ocsp-server\n        vars:\n          OCSP_ALGORITHM: \"ecdsa\"\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"ecdsa-basic-tls-ocsp-mustStaple.json\"\n      - func: \"run ocsp test\"\n        vars:\n          OCSP_ALGORITHM: \"ecdsa\"\n          OCSP_TLS_SHOULD_SUCCEED: \"true\"\n\n  - name: test-ocsp-ecdsa-delegate-invalid-cert-server-staples\n    tags: [\"ocsp\", \"ocsp-ecdsa\", \"ocsp-staple\"]\n    commands:\n      - func: run-revoked-delegate-ocsp-server\n        vars:\n          OCSP_ALGORITHM: \"ecdsa\"\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"ecdsa-basic-tls-ocsp-mustStaple.json\"\n      - func: \"run ocsp test\"\n        vars:\n          OCSP_ALGORITHM: \"ecdsa\"\n          OCSP_TLS_SHOULD_SUCCEED: \"false\"\n\n  - name: test-ocsp-ecdsa-delegate-valid-cert-server-does-not-staple\n    tags: [\"ocsp\", \"ocsp-ecdsa\"]\n    commands:\n      - func: run-valid-delegate-ocsp-server\n        vars:\n          OCSP_ALGORITHM: \"ecdsa\"\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"ecdsa-basic-tls-ocsp-disableStapling.json\"\n      - func: \"run ocsp test\"\n        vars:\n          OCSP_ALGORITHM: \"ecdsa\"\n          OCSP_TLS_SHOULD_SUCCEED: \"true\"\n\n  - name: test-ocsp-ecdsa-delegate-invalid-cert-server-does-not-staple\n    tags: [\"ocsp\", \"ocsp-ecdsa\"]\n    commands:\n      - func: run-revoked-delegate-ocsp-server\n        vars:\n          OCSP_ALGORITHM: \"ecdsa\"\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"ecdsa-basic-tls-ocsp-disableStapling.json\"\n      - func: \"run ocsp test\"\n        vars:\n          OCSP_ALGORITHM: \"ecdsa\"\n          OCSP_TLS_SHOULD_SUCCEED: \"false\"\n\n  - name: test-ocsp-ecdsa-delegate-malicious-invalid-cert-mustStaple-server-does-not-staple\n    tags: [\"ocsp\", \"ocsp-ecdsa\"]\n    commands:\n      - func: run-revoked-delegate-ocsp-server\n        vars:\n          OCSP_ALGORITHM: \"ecdsa\"\n      - func: \"bootstrap mongo-orchestration\"\n        vars:\n          ORCHESTRATION_FILE: \"ecdsa-basic-tls-ocsp-mustStaple-disableStapling.json\"\n      - func: \"run ocsp test\"\n        vars:\n          OCSP_ALGORITHM: \"ecdsa\"\n          OCSP_TLS_SHOULD_SUCCEED: \"false\"\n\n  - name: \"compile-only\"\n    commands:\n      - func: \"compile only\"\n\n  - name: \"check-rustfmt\"\n    commands:\n      - func: \"check rustfmt\"\n\n  - name: \"check-clippy\"\n    commands:\n      - func: \"check clippy\"\n\n\n\naxes:\n  - id: \"extra-rust-versions\"\n    values:\n      - id: \"min\"\n        display_name: \"1.43 (minimum supported version)\" \n        variables:\n          RUST_VERSION: \"1.43.1\"\n      - id: \"nightly\"\n        display_name: \"nightly\"\n        variables:\n          RUST_VERSION: \"nightly\"\n  - id: \"mongodb-version\"\n    display_name: MongoDB Version\n    values:\n      - id: \"latest\"\n        display_name: \"latest\"\n        variables:\n           MONGODB_VERSION: \"latest\"\n      - id: \"4.4\"\n        display_name: \"4.4\"\n        variables:\n          MONGODB_VERSION: \"4.4\"\n      - id: \"4.2\"\n        display_name: \"4.2\"\n        variables:\n          MONGODB_VERSION: \"4.2\"\n      - id: \"4.0\"\n        display_name: \"4.0\"\n        variables:\n          MONGODB_VERSION: \"4.0\"\n      - id: \"3.6\"\n        display_name: \"3.6\"\n        variables:\n          MONGODB_VERSION: \"3.6\"\n\n  - id: \"topology\"\n    display_name: Topology\n    values:\n      - id: \"standalone\"\n        display_name: Standalone\n        variables:\n           TOPOLOGY: \"server\"\n      - id: \"replica-set\"\n        display_name: Replica Set\n        variables:\n           TOPOLOGY: \"replica_set\"\n      - id: \"sharded-cluster\"\n        display_name: Sharded\n        variables:\n           TOPOLOGY: \"sharded_cluster\"\n\n  - id: \"async-runtime\"\n    display_name: Async Runtime\n    values:\n      - id: \"tokio\"\n        display_name: \"tokio\"\n        variables:\n          ASYNC_RUNTIME: \"tokio\"\n      - id: \"async-std\"\n        display_name: \"async-std\"\n        variables:\n          ASYNC_RUNTIME: \"async-std\"\n\n  # Note that drivers-evergreen-tools expects `SSL` as the environmental\n  # variable, not `TLS`, so we have to use that for the actual value used in the\n  # script; we use `TLS` for the metadata that isn't used by the actual shell\n  # scripts.\n  - id: \"auth-and-tls\"\n    display_name: Authentication and TLS\n    values:\n      - id: \"auth-and-tls\"\n        display_name: Auth TLS\n        variables:\n           AUTH: \"auth\"\n           SSL: \"ssl\"\n      - id: \"noauth-and-notls\"\n        display_name: NoAuth NoTLS\n        variables:\n           AUTH: \"noauth\"\n           SSL: \"nossl\"\n\n  - id: \"os\"\n    display_name: OS\n    values:\n      - id: ubuntu-18.04\n        display_name: \"Ubuntu 18.04\"\n        run_on: ubuntu1804-test\n        variables:\n          PYTHON: \"/opt/mongodbtoolchain/v3/bin/python\"\n          VENV_BIN_DIR: \"bin\"\n      - id: ubuntu-16.04\n        display_name: \"Ubuntu 16.04\"\n        run_on: ubuntu1604-test\n        variables:\n          PYTHON: \"/opt/mongodbtoolchain/v3/bin/python\"\n          VENV_BIN_DIR: \"bin\"\n      - id: macos-10.14\n        display_name: \"MacOS 10.14\"\n        run_on: macos-1014\n        variables:\n          SINGLE_THREAD: true\n          PYTHON: \"/opt/mongodbtoolchain/v3/bin/python\"\n          VENV_BIN_DIR: \"bin\"\n      - id: windows-64-vs2017-small\n        display_name: \"Windows (VS 2017)\"\n        run_on: windows-64-vs2017-small\n        variables:\n          PYTHON: \"/cygdrive/c/python/Python36/python\"\n          VENV_BIN_DIR: \"Scripts\"\n\nbuildvariants:\n-\n  matrix_name: \"tests\"\n  matrix_spec:\n    os:\n      - ubuntu-16.04\n      - macos-10.14\n      - windows-64-vs2017-small\n    auth-and-tls: \"*\"\n    async-runtime: \"*\"\n  display_name: \"${os} ${auth-and-tls} with ${async-runtime}\"\n  tasks:\n     - \".latest\"\n     - \".4.4\"\n     - \".4.2\"\n     - \".4.0\"\n     - \".3.6\"\n- matrix_name: \"x509-auth\"\n  matrix_spec:\n    os:\n      - ubuntu-16.04\n      - macos-10.14\n      - windows-64-vs2017-small\n    auth-and-tls: \"auth-and-tls\"\n    async-runtime: \"*\"\n  display_name: \"${os} X.509 auth with ${async-runtime}\"\n  tasks:\n    - \"test-x509-auth\"\n\n- matrix_name: \"plain-auth\"\n  matrix_spec:\n    os:\n      - ubuntu-16.04\n      - macos-10.14\n      - windows-64-vs2017-small\n    async-runtime: \"*\"\n  display_name: \"${os} PLAIN auth with ${async-runtime}\"\n  tasks:\n    - \"test-plain-auth\"\n    \n- matrix_name: \"atlas-connect\"\n  matrix_spec:\n    os:\n      - ubuntu-16.04\n      - macos-10.14\n      - windows-64-vs2017-small\n    async-runtime: \"*\"\n  display_name: \"Atlas Connectivity ${os} with ${async-runtime}\"\n  tasks:\n    - \".atlas-connect\"\n- matrix_name: \"aws-auth\"\n  matrix_spec:\n    os:\n      - ubuntu-18.04\n    async-runtime: \"tokio\"\n  display_name: \"AWS Auth ${os} with ${async-runtime}\"\n  tasks:\n    - \".aws-auth\"\n# TODO: RUST-361 enable these tests once OCSP support is implemented\n# - matrix_name: \"ocsp\"\n#   matrix_spec:\n#     os:\n#       - ubuntu-18.04\n#     async-runtime: \"*\"\n#     mongodb-version:\n#       - latest\n#       - 4.4\n#   display_name: \"OCSP ${os} ${mongodb-version} with ${async-runtime}\"\n#   batchtime: 20160 # 14 days\n#   tasks:\n#     - \".ocsp\"\n# - matrix_name: \"ocsp-macos\"\n#   matrix_spec:\n#     os:\n#       - macos-10.14\n#     async-runtime: \"*\"\n#     mongodb-version:\n#       - latest\n#       - 4.4\n#   display_name: \"OCSP ${os} ${mongodb-version} with ${async-runtime}\"\n#   batchtime: 20160 # 14 days\n#   tasks:\n#       # macOS MongoDB servers do not staple OCSP responses and only support RSA.\n#       - name: \".ocsp-rsa !.ocsp-staple\"\n# - matrix_name: \"ocsp-windows\"\n#   matrix_spec:\n#     os:\n#       - windows-64-vs2017-small\n#     async-runtime: \"*\"\n#     mongodb-version:\n#       - latest\n#       - 4.4\n#   display_name: \"OCSP ${os} ${mongodb-version} with ${async-runtime}\"\n#   batchtime: 20160 # 14 days\n#   tasks:\n#       # Windows MongoDB servers do not staple OCSP responses and only support RSA.\n#       - name: \".ocsp-rsa !.ocsp-staple\"\n- matrix_name: \"compile-only\"\n  matrix_spec:\n    os:\n      - ubuntu-18.04\n    async-runtime: \"*\"\n    extra-rust-versions: \"*\"\n  display_name: \"Compile on Rust ${extra-rust-versions} with ${async-runtime}\"\n  tasks:\n    - \"compile-only\"\n\n-\n  name: \"lint\"\n  display_name: \"Lint\"\n  run_on:\n    - ubuntu1804-test\n  tasks:\n    - name: \"check-clippy\"\n    - name: \"check-rustfmt\"\n\n",
    "project": "mongo-rust-driver",
    "can_enqueue_to_commit_queue": true
}
